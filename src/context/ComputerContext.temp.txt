const newData: RawMaterialGroupModel = deepClone(currentRawMaterial);

        callByCentralType(
            currentMixingCenterSettings.centralType,
            newData,
            (dataManual) => { // Manual
                callByPopulationType(
                    currentMixingCenterSettings.populationType,
                    dataManual,
                    (dataAdulto) => {
                        const backup = deepClone(backup_MC_Manual_RawMaterials);
                        backup.adultoRawMaterial = dataAdulto;
                        setBackup_MC_Manual_RawMaterials(backup);
                    }, // Adulto
                    (dataNeonatal) => {
                        const backup = deepClone(backup_MC_Manual_RawMaterials);
                        backup.neonatalRawMaterial = dataNeonatal;
                        setBackup_MC_Manual_RawMaterials(backup);
                    }, // Neonatal
                    (dataPediatrica) => {
                        const backup = deepClone(backup_MC_Manual_RawMaterials);
                        backup.pediatricoRawMaterial = dataPediatrica;
                        setBackup_MC_Manual_RawMaterials(backup);
                    } // Pediatrica
                );
            },
            (dataAutomatic) => { // Automatic
                callByPopulationType(
                    currentMixingCenterSettings.populationType,
                    dataAutomatic,
                    (dataAdulto) => {
                        const backup = deepClone(backup_MC_Automatic_RawMaterials);
                        backup.adultoRawMaterial = dataAdulto;
                        setBackup_MC_Automatic_RawMaterials(backup);
                    }, // Adulto
                    (dataNeonatal) => {
                        const backup = deepClone(backup_MC_Automatic_RawMaterials);
                        backup.neonatalRawMaterial = dataNeonatal;
                        setBackup_MC_Automatic_RawMaterials(backup);
                    }, // Neonatal
                    (dataPediatrica) => {
                        const backup = deepClone(backup_MC_Automatic_RawMaterials);
                        backup.pediatricoRawMaterial = dataPediatrica;
                        setBackup_MC_Automatic_RawMaterials(backup);
                    } // Pediatrica
                );
            }
        );

----------------

let gatherData: RawMaterialGroupModel | null = null;

        gatherData = callByCentralTypeWithReturn(
            currentMixingCenterSettings.centralType,
            () => { // Manual
                return callByPopulationTypeWithReturn(
                    currentMixingCenterSettings.populationType,
                    () => {
                        return deepClone(backup_MC_Manual_RawMaterials.adultoRawMaterial);
                    }, //Adulto
                    () => {
                        return deepClone(backup_MC_Manual_RawMaterials.neonatalRawMaterial);
                    }, //Neonatal
                    () => {
                        return deepClone(backup_MC_Manual_RawMaterials.pediatricoRawMaterial);
                    }, //Pediatrico
                );
            },
            () => { //Automatic
                return callByPopulationTypeWithReturn(
                    currentMixingCenterSettings.populationType,
                    () => {
                        return deepClone(backup_MC_Automatic_RawMaterials.adultoRawMaterial);
                    }, //Adulto
                    () => {
                        return deepClone(backup_MC_Automatic_RawMaterials.neonatalRawMaterial);
                    }, //Neonatal
                    () => {
                        return deepClone(backup_MC_Automatic_RawMaterials.pediatricoRawMaterial);
                    }, //Pediatrico
                );
            }
        );

        return gatherData;


----------------

// Para manejar el primer render
    const refCurrentRawMaterialRender = useRef(true);

// if (refCurrentRawMaterialRender.current) {
//     refCurrentRawMaterialRender.current = false;
//     return;
// }

----------------

        callByCentralType(
            currentMixingCenterSettings.centralType,
            currentAutomatedEquipment,
            (dataManual) => {
                const backup = deepClone(backup_MC_Manual_Resources);
                backup.automatedEquipment = dataManual;
                setBackup_MC_Manual_Resources(backup);
            },
            (dataAutomatic) => {
                const backup = deepClone(backup_MC_Automatic_Resources);
                backup.automatedEquipment = dataAutomatic;
                setBackup_MC_Automatic_Resources(backup);
            }
        );

----------------



// useEffect(() => {
    //     if (isProcessing === false) {
    //         console.log("*** HUBO UN CAMBIO EN EL TIPO DE CENTRAL, O EN EL TIPO DE POBLACION. ***");
    //         populateCurrentRawMaterial();
    //     } else {
    //         console.log("HUBO UN CAMBIO EN 'CENTRALTYPE O POPULATION TYPE' PERO OTRO PROCESO ESTABA EN EJECUCION.");
    //     }
    // }, [currentCentralType, currentPopulationType]);

    // const isCurrentCentralTypeFirstRender = useRef(true);

    // useEffect(() => {
    //     if (isCurrentCentralTypeFirstRender.current) {
    //         isCurrentCentralTypeFirstRender.current = false;
    //         return;
    //     }

    //     console.log("*** HUBO UN CAMBIO EN EL TIPO DE CENTRAL ***");
    //     populateCurrentRawMaterial();
    // }, [currentCentralType]);

    // const isCurrentPopulationTypeFirstRender = useRef(true);

    // useEffect(() => {
    //     if (isCurrentPopulationTypeFirstRender.current) {
    //         isCurrentPopulationTypeFirstRender.current = false;
    //         return;
    //     }

    //     console.log("*** HUBO UN CAMBIO EN EL TIPO DE POBLACION. ***");
    //     populateCurrentRawMaterial();
    // }, [currentPopulationType]);


----------------

backupDataModelByCentralType(
    currentMixingCenterSettings.centralType,
    currentAutomatedEquipment,
    backup_MC_Manual_Resources,
    backup_MC_Automatic_Resources,
    setBackup_MC_Manual_Resources,
    setBackup_MC_Automatic_Resources,
    (fromValue, toValue) => { fromValue.automatedEquipment = toValue; }
);

backupDataModelByCentralType(
    currentMixingCenterSettings.centralType,
    currentHygieneAndCleaning,
    backup_MC_Manual_Resources,
    backup_MC_Automatic_Resources,
    setBackup_MC_Manual_Resources,
    setBackup_MC_Automatic_Resources,
    (fromValue, toValue) => { fromValue.hygieneAndCleaning = toValue; }
);

return gatherDataModelFromBackup(
            currentMixingCenterSettings.centralType,
            backup_MC_Manual_Resources,
            backup_MC_Automatic_Resources,
            (from) => { return from.automatedEquipment; }
        );


**********************

const gatherComputerData = (): ComputerBigGroupModel => {
        const output: ComputerBigGroupModel = new ComputerBigGroupModel();

        // output.mixingCenterSettings = deepClone(currentMixingCenterSettings);
        // output.automatedEquipment = deepClone(currentAutomatedEquipment);
        // output.hygieneAndCleaning = deepClone(currentHygieneAndCleaning);
        // output.personalProtection = deepClone(currentPersonalProtection);
        // output.sterileWorkEquipment = deepClone(currentSterileWorkEquipment);
        // output.maintenanceCosts = deepClone(currentMaintenanceCosts);
        // output.productionCosts = deepClone(currentProductionCosts);
        // output.chemistSalary = deepClone(currentChemistSalary);
        // output.assistantSalary = deepClone(currentAssistantSalary);
        //TODO
        // output.mixingCenterManualAdultoRawMaterial = deepClone(mixingCenterManualAdultoRawMaterialData);
        // output.mixingCenterManualNeonatalRawMaterial = deepClone(mixingCenterManualNeonatalRawMaterialData);
        // output.mixingCenterManualPediatricaRawMaterial = deepClone(mixingCenterManualPediatricaRawMaterialData);
        // output.mixingCenterAutomaticAdultoRawMaterial = deepClone(mixingCenterAutomaticAdultoRawMaterialData);
        // output.mixingCenterAutomaticNeonatalRawMaterial = deepClone(mixingCenterAutomaticNeonatalRawMaterialData);
        // output.mixingCenterAutomaticPediatricaRawMaterial = deepClone(mixingCenterAutomaticPediatricaRawMaterialData);

        return output;
    }

    const applyComputerData = (inData: ComputerBigGroupModel): void => {
        // if (inData.mixingCenterSettings) {
        //     const tempData = deepClone(inData.mixingCenterSettings);
        //     tempData.populationType = PopulationTypeIdEnum.Adulto;
        //     tempData.centralType = CentralTypeIdEnum.Manual;

        //     setCurrentMixingCenterSettings(tempData);
        // }

        // if (inData.automatedEquipment) {
        //     setCurrentAutomatedEquipment(deepClone(inData.automatedEquipment));
        // }

        // if (inData.hygieneAndCleaning) {
        //     setCurrentHygieneAndCleaning(deepClone(inData.hygieneAndCleaning));
        // }

        // if (inData.personalProtection) {
        //     setCurrentPersonalProtection(deepClone(inData.personalProtection));
        // }

        // if (inData.sterileWorkEquipment) {
        //     setCurrentSterileWorkEquipment(deepClone(inData.sterileWorkEquipment));
        // }

        // if (inData.maintenanceCosts) {
        //     setCurrentMaintenanceCosts(deepClone(inData.maintenanceCosts));
        // }

        // if (inData.productionCosts) {
        //     setCurrentProductionCosts(deepClone(inData.productionCosts));
        // }

        // if (inData.chemistSalary) {
        //     setCurrentChemistSalary(deepClone(inData.chemistSalary));
        // }

        // if (inData.assistantSalary) {
        //     setCurrentAssistantSalary(deepClone(inData.assistantSalary));
        // }

        // //TODO

        // // if (inData.mixingCenterManualAdultoRawMaterial) {
        // //     setMixingCenterManualAdultoRawMaterialData(deepClone(inData.mixingCenterManualAdultoRawMaterial));
        // // }

        // // if (inData.mixingCenterManualNeonatalRawMaterial) {
        // //     setMixingCenterManualNeonatalRawMaterialData(deepClone(inData.mixingCenterManualNeonatalRawMaterial));
        // // }

        // // if (inData.mixingCenterManualPediatricaRawMaterial) {
        // //     setMixingCenterManualPediatricaRawMaterialData(deepClone(inData.mixingCenterManualPediatricaRawMaterial));
        // // }

        // // if (inData.mixingCenterAutomaticAdultoRawMaterial) {
        // //     setMixingCenterAutomaticAdultoRawMaterialData(deepClone(inData.mixingCenterAutomaticAdultoRawMaterial));
        // // }

        // // if (inData.mixingCenterAutomaticNeonatalRawMaterial) {
        // //     setMixingCenterAutomaticNeonatalRawMaterialData(deepClone(inData.mixingCenterAutomaticNeonatalRawMaterial));
        // // }

        // // if (inData.mixingCenterAutomaticPediatricaRawMaterial) {
        // //     setMixingCenterAutomaticPediatricaRawMaterialData(deepClone(inData.mixingCenterAutomaticPediatricaRawMaterial));
        // // }

        // if (inData.mixingCenterManualAdultoRawMaterial) {
        //     setCurrentRawMaterial(deepClone(inData.mixingCenterManualAdultoRawMaterial));
        // }
    }

    // Obtiene los datos de 'get_CurrentRawMaterial' para asignarselo al punto central que es 'CurrentRawMaterialData'
    const populateCurrentRawMaterial = (): void => {
        try {
            setIsProcessing(true);

            const results: RawMaterialGroupModel | null = gatherRawMaterial();

            if (results === null) {
                throw new Error("Error. Los datos recoletados de memoria no pueden estar null.");
            }

            const newData: RawMaterialGroupModel = deepClone(results);

            setCurrentRawMaterial(newData);
        } catch (error) {
            console.error(error);
            throw error;
        } finally {
            setIsProcessing(false);
        }
    }