   // SE ENCARGA DE COPIAR LOS DATOS DE 'CURRENTRAWMATERIALDATA' AL MODELO QUE 
    // LE CORRESPONDE SEGÃšN EL TIPO DE CENTRAL Y EL TIPO DE POBLACION.
    const backupCurrentRawMaterial = (): void => {
        backupRawMaterialInTo(
            currentMixingCenterSettings.centralType,
            currentMixingCenterSettings.populationType,
            currentRawMaterial,
            backup_MC_Manual_RawMaterials,
            backup_MC_Automatic_RawMaterials,
            setBackup_MC_Manual_RawMaterials,
            setBackup_MC_Automatic_RawMaterials
        );
    }

    const internalBackupData = <TModel,>(
        inCentralType: CentralTypeIdEnum,
        input: TModel,
        callback: (fromValue: MixingCenterOperatingResourcesModel, toValue: TModel) => void
    ): void => {
        backupDataModelByCentralType(
            inCentralType,
            input,
            backup_MC_Manual_Resources,
            backup_MC_Automatic_Resources,
            setBackup_MC_Manual_Resources,
            setBackup_MC_Automatic_Resources,
            callback
            // (fromValue, toValue) => { fromValue.automatedEquipment = toValue; }
        );
    }

    const backupAutomatedEquipmentData = (inCentralType: CentralTypeIdEnum): void => {
        internalBackupData(
            inCentralType,
            currentAutomatedEquipment,
            (fromValue, toValue) => { fromValue.automatedEquipment = toValue; }
        );
    }

    const backupHygieneAndCleaningData = (inCentralType: CentralTypeIdEnum): void => {
        internalBackupData(
            inCentralType,
            currentHygieneAndCleaning,
            (fromValue, toValue) => { fromValue.hygieneAndCleaning = toValue; }
        );
    }

    const backupPersonalProtectionData = (inCentralType: CentralTypeIdEnum): void => {
        internalBackupData(
            inCentralType,
            currentPersonalProtection,
            (fromValue, toValue) => { fromValue.personalProtection = toValue; }
        );
    }

    const backupSterileWorkEquipmentData = (inCentralType: CentralTypeIdEnum): void => {
        internalBackupData(
            inCentralType,
            currentSterileWorkEquipment,
            (fromValue, toValue) => { fromValue.sterileWorkEquipment = toValue; }
        );
    }

    const backupMaintenanceCostsData = (inCentralType: CentralTypeIdEnum): void => {
        internalBackupData(
            inCentralType,
            currentMaintenanceCosts,
            (fromValue, toValue) => { fromValue.maintenanceCosts = toValue; }
        );
    }

    const backupProductionCostsData = (inCentralType: CentralTypeIdEnum): void => {
        internalBackupData(
            inCentralType,
            currentProductionCosts,
            (fromValue, toValue) => { fromValue.productionCosts = toValue; }
        );
    }

    const backupStaffChemistSalaryData = (inCentralType: CentralTypeIdEnum): void => {
        internalBackupData(
            inCentralType,
            currentChemistSalary,
            (fromValue, toValue) => { fromValue.staffChemistSalary = toValue; }
        );
    }

    const backupStaffAssistantSalaryData = (inCentralType: CentralTypeIdEnum): void => {
        internalBackupData(
            inCentralType,
            currentAssistantSalary,
            (fromValue, toValue) => { fromValue.staffAssistantSalary = toValue; }
        );
    }


 /* *************************************** AREA DE LOS GET FROM BACKUP *************************************** */
    // Obtiene los datos segun el tipo de central y el tipo de poblacion (recordar que estan almancenados independientemente)
    const getRawMaterialFromBackup = (): RawMaterialGroupModel | null => {
        return gatherRawMaterialFromBackup(
            currentMixingCenterSettings.centralType,
            currentMixingCenterSettings.populationType,
            backup_MC_Manual_RawMaterials,
            backup_MC_Automatic_RawMaterials
        );
    }

    const internalGetDataFromBackup = <TModel,>(callback: (from: MixingCenterOperatingResourcesModel) => TModel | null): TModel | null => {
        return gatherDataModelFromBackup(
            currentMixingCenterSettings.centralType,
            backup_MC_Manual_Resources,
            backup_MC_Automatic_Resources,
            callback
        );
    }

    const getAutomatedEquipmentFromBackup = (): AutomatedEquipmentGroupModel | null => {
        return internalGetDataFromBackup((from) => { return from.automatedEquipment; });
    }

    const getHygieneAndCleaningFromBackup = (): HygieneAndCleaningGroupModel | null => {
        return internalGetDataFromBackup((from) => { return from.hygieneAndCleaning; });
    }

    const getPersonalProtectionFromBackup = (): PersonalProtectionGroupModel | null => {
        return internalGetDataFromBackup((from) => { return from.personalProtection; });
    }

    const getSterileWorkEquipmentFromBackup = (): SterileWorkEquipmentGroupModel | null => {
        return internalGetDataFromBackup((from) => { return from.sterileWorkEquipment; });
    }

    const getMaintenanceCostsFromBackup = (): MaintenanceCostsGroupModel | null => {
        return internalGetDataFromBackup((from) => { return from.maintenanceCosts; });
    }

    const getProductionCostsFromBackup = (): ProductionCostsGroupModel | null => {
        return internalGetDataFromBackup((from) => { return from.productionCosts; });
    }

    const getStaffChemistSalaryFromBackup = (): StaffSalaryGroupModel | null => {
        return internalGetDataFromBackup((from) => { return from.staffChemistSalary; });
    }

    const getStaffAssistantSalaryFromBackup = (): StaffSalaryGroupModel | null => {
        return internalGetDataFromBackup((from) => { return from.staffAssistantSalary; });
    }


    // useEffect(() => {
    //     if (isReady) {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT RAW MATERIAL'.");
    //         backupCurrentRawMaterial();
    //     } else {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT RAW MATERIAL' PERO NO SE HA TERMINADO DE MONTAR.");
    //     }
    // }, [currentRawMaterial]);

    // useEffect(() => {
    //     if (isReady) {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT AUTOMATED EQUIPMENT'.");
    //         backupAutomatedEquipmentData();
    //     } else {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT AUTOMATED EQUIPMENT' PERO NO SE HA TERMINADO DE MONTAR.");
    //     }
    // }, [currentAutomatedEquipment]);

    // useEffect(() => {
    //     if (isReady) {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT HygieneAndCleaning'.");
    //         backupHygieneAndCleaningData();
    //     } else {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT HygieneAndCleaning' PERO NO SE HA TERMINADO DE MONTAR.");
    //     }
    // }, [currentHygieneAndCleaning]);

    // useEffect(() => {
    //     if (isReady) {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT PersonalProtection'.");
    //         backupPersonalProtectionData();
    //     } else {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT PersonalProtection' PERO NO SE HA TERMINADO DE MONTAR.");
    //     }
    // }, [currentPersonalProtection]);

    // useEffect(() => {
    //     if (isReady) {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT PersonalProtection'.");
    //         backupSterileWorkEquipmentData();
    //     } else {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT PersonalProtection' PERO NO SE HA TERMINADO DE MONTAR.");
    //     }
    // }, [currentSterileWorkEquipment]);

    // useEffect(() => {
    //     if (isReady) {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT MaintenanceCosts'.");
    //         backupMaintenanceCostsData();
    //     } else {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT MaintenanceCosts' PERO NO SE HA TERMINADO DE MONTAR.");
    //     }

    //     console.log(".");
    //     console.log("------");
    //     console.log(currentMaintenanceCosts);
    //     console.log("------");
    //     console.log(".");
    // }, [currentMaintenanceCosts]);

    // useEffect(() => {
    //     if (isReady) {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT ProductionCosts'.");
    //         backupProductionCostsData();
    //     } else {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT ProductionCosts' PERO NO SE HA TERMINADO DE MONTAR.");
    //     }
    // }, [currentProductionCosts]);

    // useEffect(() => {
    //     if (isReady) {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT ChemistSalary'.");
    //         backupChemistSalaryData();
    //     } else {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT ChemistSalary' PERO NO SE HA TERMINADO DE MONTAR.");
    //     }
    // }, [currentChemistSalary]);

    // useEffect(() => {
    //     if (isReady) {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT AssistantSalary'.");
    //         backupAssistantSalaryData();
    //     } else {
    //         console.log("HUBO UN CAMBIO EN 'CURRENT AssistantSalary' PERO NO SE HA TERMINADO DE MONTAR.");
    //     }
    // }, [currentAssistantSalary]);





    const isMixingCenterSettings1FirstRender = useRef(true);


        // if (isMixingCenterSettings1FirstRender.current) {
        //     console.log("MixingCenterSettings first render ");
        //     isMixingCenterSettings1FirstRender.current = false;
        //     return;
        // }


        // if (isReady) {
        //     console.log("HUBO UN CAMBIO EN 'CURRENT MIXINGCENTERSETTINGS.");
        //     updatesMixingCenterBasics();
        // } else {
        //     console.log("HUBO UN CAMBIO EN 'CURRENT MIXINGCENTERSETTINGS' PERO NO SE HA TERMINADO DE MONTAR.");
        // }




    //--------------------------------------------------



    // const getAndSetDataFromInternalBackup = <TModel,>(
    //     callBackGet: () => TModel | null,
    //     setDataFromBackup: (inData: TModel) => void
    // ): void => {
    //     const _dataFromBackup: TModel | null = callBackGet();

    //     if (_dataFromBackup !== undefined && _dataFromBackup !== null) {
    //         // console.log("MixingCenterProvider.getAndSetDataFromInternalBackup()");
    //         // console.log(_dataFromBackup);
    //         setDataFromBackup(_dataFromBackup);
    //     } else {
    //         throw new Error(msgInvalidData);
    //     }
    // }




    /* *************************************** AREA DE LOS BACKUPS *************************************** */


    // const updatesMixingCenterBasics = (): void => {
    //     if (currentMixingCenterSettings !== undefined && currentMixingCenterSettings !== null) {
    //         console.log("updatesMixingCenterBasics()......");

    //         const _centralType = currentMixingCenterSettings.centralType;
    //         const _populationType = currentMixingCenterSettings.populationType;

    //         if (internalCentralType !== _centralType) {
    //             setInternalCentralType(_centralType);
    //         }

    //         if (internalPopulationType !== _populationType) {
    //             setInternalPopulationType(_populationType);
    //         }
    //     }
    // }

    /* *************************************** AREA DE LOS BACKUPS *************************************** */